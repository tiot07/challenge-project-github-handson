AWSTemplateFormatVersion: '2010-09-09'
Description: S3 static website (S3, CloudFront, IAM role)

Parameters:
  IamUserArn:
    Description: IAM user ARN (S3 access)
    Type: String
    Default: arn:aws:iam::000000000000:user/dummy

Conditions:
  IsS3RoleEnable: !Not
    - !Equals
      - !Ref 'IamUserArn'
      - arn:aws:iam::000000000000:user/dummy

Resources:
  S3Bucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-${AWS::AccountId}-${AWS::Region}'
      LifecycleConfiguration:
        Rules:
          - Id: NoncurrentVersionExpiration
            Status: Enabled
            NoncurrentVersionExpirationInDays: 45
      LoggingConfiguration:
        DestinationBucketName: !Ref 'S3BucketAccesslogs'
        LogFilePrefix: !Sub 's3/${AWS::StackName}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: CloudFormationArn
          Value: !Sub '${AWS::StackName}'

  S3BucketAccesslogs:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub '${AWS::StackName}-accesslogs-${AWS::AccountId}-${AWS::Region}'
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LifecycleConfiguration:
        Rules:
          - Id: AutoDelete
            Status: Enabled
            ExpirationInDays: 15
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: true
        IgnorePublicAcls: false
        RestrictPublicBuckets: true
      Tags:
        - Key: CloudFormationArn
          Value: !Sub '${AWS::StackName}'

  S3BucketPolicyAccessLogs:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3BucketAccesslogs'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action:
              - s3:PutObject
            Resource:
              - !Sub 'arn:aws:s3:::${S3BucketAccesslogs}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "OAI for ${AWS::StackName}"

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'S3Bucket'
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${S3Bucket}/*'

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt S3Bucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        Enabled: true
        DefaultRootObject: index.html
        Logging:
          IncludeCookies: 'false'
          Bucket: !GetAtt S3BucketAccesslogs.RegionalDomainName
          Prefix: !Sub 'cloudfront/${AWS::StackName}'
        CustomErrorResponses:
          - ErrorCachingMinTTL: 300
            ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
        Comment: !Sub '${AWS::StackName}-distribution'
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
          DefaultTTL: 300
          MaxTTL: 300
          MinTTL: 300
          ViewerProtocolPolicy: redirect-to-https

  IamRoleS3access:
    Condition: IsS3RoleEnable
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-s3access-role-${AWS::Region}'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Ref 'IamUserArn'
            Action: sts:AssumeRole
            Condition:
              Bool:
                aws:MultiFactorAuthPresent: 'true'
              IpAddress:
                aws:SourceIp:
                  - 0.0.0.0/0
                  - ::/0
      Policies:
        - PolicyName: S3accessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                Resource:
                  - arn:aws:s3:::*
              - Effect: Allow
                Action:
                  - s3:*
                Resource:
                  - !Sub 'arn:aws:s3:::${S3Bucket}/*'
                  - !Sub 'arn:aws:s3:::${S3Bucket}'
              - Effect: Deny
                Action:
                  - s3:PutBucket*
                  - s3:CreateBucket
                  - s3:DeleteBucket
                  - s3:PutObjectAcl
                  - s3:PutObjectVersionAcl
                Resource:
                  - arn:aws:s3:::*
              - Effect: Allow
                Action:
                  - cloudfront:Get*
                  - cloudfront:List*
                Resource:
                  - '*'
              - Effect: Allow
                Action:
                  - cloudfront:CreateInvalidation
                Resource:
                  - !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'

Outputs:
  CloudFrontDomainName:
    Value: !GetAtt 'CloudFrontDistribution.DomainName'
  S3BucketName:
    Value: !Ref 'S3Bucket'
  S3BucketAccesslogsName:
    Value: !Ref 'S3BucketAccesslogs'